"""Initial migration

Revision ID: 571469c3ce9d
Revises: 
Create Date: 2025-07-29 03:28:18.670310

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '571469c3ce9d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('credit_transactions')
    op.drop_table('service_subcategories')
    op.drop_table('exchanges')
    op.drop_table('security_logs')
    op.drop_table('matching_scores')
    op.drop_table('ratings_reviews')
    op.drop_table('services')
    op.drop_table('service_categories')
    op.drop_table('fraud_detection')
    op.drop_table('user_credits')
    op.drop_table('users')
    op.drop_table('user_skills')
    op.drop_table('exchange_messages')
    op.drop_table('notifications')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('exchange_request', 'message', 'rating', 'system', 'promotion', name='notifications_type_enum'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_push_sent', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('priority', postgresql.ENUM('low', 'normal', 'high', 'urgent', name='notifications_priority_enum'), server_default=sa.text("'normal'::notifications_priority_enum"), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='notifications_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_table('exchange_messages',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('exchange_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('message_type', postgresql.ENUM('text', 'image', 'file', 'system', 'proposal', name='exchange_messages_type_enum'), server_default=sa.text("'text'::exchange_messages_type_enum"), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('attachments', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_translated', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('original_language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('translated_content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exchange_id'], ['exchanges.id'], name='exchange_messages_exchange_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], name='exchange_messages_sender_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='exchange_messages_pkey')
    )
    op.create_table('user_skills',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('skill_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('skill_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('years_experience', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('verification_documents', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('skill_level >= 1 AND skill_level <= 5', name='user_skills_skill_level_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_skills_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_skills_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('profile_image_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('biography', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('verification_level', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('reputation_score', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('location_lat', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('location_lng', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_credits',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('current_balance', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('total_earned', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('total_spent', sa.NUMERIC(precision=10, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_credits_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_credits_pkey')
    )
    op.create_table('fraud_detection',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('risk_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('flags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_evaluation', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('is_suspicious', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('manual_review_required', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fraud_detection_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='fraud_detection_pkey')
    )
    op.create_table('service_categories',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('icon_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('color_hex', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('order_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='service_categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('services',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('subcategory_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('estimated_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('difficulty_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('required_materials', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location_type', postgresql.ENUM('remote', 'in_person', 'hybrid', name='location_type_enum'), autoincrement=False, nullable=False),
    sa.Column('is_available', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('images', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('minimum_exchange_value', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('preferred_exchange_types', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('views_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('difficulty_level >= 1 AND difficulty_level <= 5', name='services_difficulty_level_check'),
    sa.ForeignKeyConstraint(['category_id'], ['service_categories.id'], name='services_category_id_fkey'),
    sa.ForeignKeyConstraint(['subcategory_id'], ['service_subcategories.id'], name='services_subcategory_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='services_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='services_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('ratings_reviews',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('exchange_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('reviewer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('reviewee_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('overall_rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('communication_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('punctuality_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quality_rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('review_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('helpful_votes', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('communication_rating >= 1 AND communication_rating <= 5', name='ratings_reviews_communication_rating_check'),
    sa.CheckConstraint('overall_rating >= 1 AND overall_rating <= 5', name='ratings_reviews_overall_rating_check'),
    sa.CheckConstraint('punctuality_rating >= 1 AND punctuality_rating <= 5', name='ratings_reviews_punctuality_rating_check'),
    sa.CheckConstraint('quality_rating >= 1 AND quality_rating <= 5', name='ratings_reviews_quality_rating_check'),
    sa.ForeignKeyConstraint(['exchange_id'], ['exchanges.id'], name='ratings_reviews_exchange_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewee_id'], ['users.id'], name='ratings_reviews_reviewee_id_fkey'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], name='ratings_reviews_reviewer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ratings_reviews_pkey')
    )
    op.create_table('matching_scores',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user1_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user2_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('service1_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('service2_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('compatibility_score', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('algorithm_version', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('factors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('calculated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['service1_id'], ['services.id'], name='matching_scores_service1_id_fkey'),
    sa.ForeignKeyConstraint(['service2_id'], ['services.id'], name='matching_scores_service2_id_fkey'),
    sa.ForeignKeyConstraint(['user1_id'], ['users.id'], name='matching_scores_user1_id_fkey'),
    sa.ForeignKeyConstraint(['user2_id'], ['users.id'], name='matching_scores_user2_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='matching_scores_pkey'),
    sa.UniqueConstraint('user1_id', 'user2_id', 'service1_id', 'service2_id', name='matching_scores_user1_id_user2_id_service1_id_service2_id_key')
    )
    op.create_table('security_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('additional_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='security_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='security_logs_pkey')
    )
    op.create_table('exchanges',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('requester_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('requester_service_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('provider_service_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('proposed', 'negotiating', 'accepted', 'in_progress', 'completed', 'cancelled', 'disputed', name='exchange_status_enum'), server_default=sa.text("'proposed'::exchange_status_enum"), autoincrement=False, nullable=False),
    sa.Column('exchange_type', postgresql.ENUM('direct', 'multi_party', 'credit_based', name='exchange_type_enum'), server_default=sa.text("'direct'::exchange_type_enum"), autoincrement=False, nullable=False),
    sa.Column('estimated_value', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('actual_value', sa.NUMERIC(precision=8, scale=2), autoincrement=False, nullable=True),
    sa.Column('completion_deadline', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('terms_conditions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('special_requirements', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('progress_percentage', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['users.id'], name='exchanges_provider_id_fkey'),
    sa.ForeignKeyConstraint(['provider_service_id'], ['services.id'], name='exchanges_provider_service_id_fkey'),
    sa.ForeignKeyConstraint(['requester_id'], ['users.id'], name='exchanges_requester_id_fkey'),
    sa.ForeignKeyConstraint(['requester_service_id'], ['services.id'], name='exchanges_requester_service_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='exchanges_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('service_subcategories',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('order_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['service_categories.id'], name='service_subcategories_category_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='service_subcategories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('credit_transactions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('exchange_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('transaction_type', postgresql.ENUM('earned', 'spent', 'bonus', 'penalty', 'refund', name='credit_transactions_type_enum'), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exchange_id'], ['exchanges.id'], name='credit_transactions_exchange_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='credit_transactions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='credit_transactions_pkey')
    )
    # ### end Alembic commands ###
